name: build mvn and docker, push specific tag, semantic release

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  GITHUB_NAME:  gemeinschaftswerknachhaltigkeit
  IMAGE_NAME: gw-landingpage

jobs:
  build:
    name: maven package, docker build and push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: find latest tag
        uses: oprypin/find-latest-tag@v1
        with:
          repository: ${{env.GITHUB_NAME}}/${{env.IMAGE_NAME}}
          releases-only: false
        id: latestVersion  # The step ID to refer to later.
      - run: echo "latestVersion is ${{ steps.latestVersion.outputs.tag }}"

      - name: checkout
        uses: actions/checkout@v3
      
      - name: set up node js 18, install and build
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install
      - run: npm build
    
      - name: build the docker image
        run: docker build . --file Dockerfile --tag ${{env.REGISTRY}}/${{ env.GITHUB_NAME }}/${{env.IMAGE_NAME}}:${{ steps.latestVersion.outputs.tag }}
      
      - name: login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: push image to GitHub Container Registry
        run: docker push ${{env.REGISTRY}}/${{ env.GITHUB_NAME }}/${{env.IMAGE_NAME}}:${{ steps.latestVersion.outputs.tag}}
        
  release:
    needs: build
    name: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          
      - name: install dependencies
        run: npm clean-install
        
      - name: verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures
        
      - name: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release
